input_val: number = 1
output_desire: number = 0
input_weight: number = 0.5
learning_rate: number = 0.01

# Função de Ativação
func activation(sum: number) -> number {
    if (sum >= 0) {
        return 1
    }
    else {
        return 0
    }
}

print("Entrada: ", input_val, " Desejado: ", output_desire)

# Inicializar erro
error: number = 1000.0
iteration: number = 0
bias: number = 1
bias_weight: number = 0.5

while (error != 0) {
    iteration = iteration + 1
    print("#### Iteração: ", iteration)
    print("Peso: ", input_weight)

    sum_val: number = (input_val * input_weight) + (bias * bias_weight)
    output: number = activation(sum_val)
    print("Saída: ", output)
    error = output_desire - output
    print("Erro: ", error)
    if (error != 0) {
        input_weight = input_weight + (learning_rate * input_val * error)
        print("Peso do bias: ", bias_weight)
        bias_weight = bias_weight + (learning_rate * bias * error)
    }
}

print("Parabéns!!! A Rede de um Neurônio Aprendeu")
print("Valor desejado: ", output_desire)